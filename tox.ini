# Global settings for tox
[tox]
# List of environments to run by default.
# This is an advanced configuration, as tox will run
# four virtualenvs (py27-dev, py27-test, py3-dev, py3-test) and the lint environment
# Each of these environments must be configured in this file (see bellow)
envlist = lint, mypy, pytest, coverage, docs
# By default tox assumed we are testing a python package, so it will look for
# a "setup.py" file. If the 'skipdist' flag is set to 'True', tox assume we
# are testing something else and wont' look for a 'setup.py' file.
# skipsdist = false

# Default test environment tox will create.#
# This environment is always used, regardless if be have defined additional environments, too
# In an environment we can define:
# - what versions of Python to use to create the testenvs,
# - what dependencies to install into them,
# - what environment variables,
# - what commands to run in the testenvs,
# - etc.
[testenv]

basepython = python3

### Dependencies
# Require tox to install the dependencies that your commands
# need into the virtualenvs before running the commands
# By default tox will always re-created the virtualenvs when this
# list is changed, yet not when a referenced file, such as 'requirements.txt'
# changes. By '-r' we tell tox to re-created the virtualenvs when
# this file changes
deps =
    -r requirements.txt

### Environment varibale
# In order to isolate virtualenvs from the system tox removes
# most of your shell’s environment variables. The available
# environment variables within the environment variables can be
# shown by this command
# --
# whitelist_externals = env
# commands = env
# --
# On order to pass shell’s environment variable into the virtualenvs
# this must explicitly be configured
# --
# passenv =
#    DATABASE_URL
#    ELASTICSEARCH_URL
#    PYTEST_ADDOPTS
#    …
# --
# or dedicated environment variables for the virtualenvs defined:
# --
# setenv =
#    DATABASE_URL = postgresql://postgres@localhost/postgres
#    ELASTICSEARCH_URL = …
#    …
# --

### Commandes
# By default tox only runs applications that are available in the
# virtual environment tox created. 'sh' is by default not available
# in such an environment. So if we can to run a shell command later,
# we need to add it to a white list, so the 'sh' command can be looked
# up, from the operating system
whitelist_externals =
    echo
    sh
commands =
    echo "## Hi there!"
    sh -c "echo $PATH"
    python --version
    python -m build
    python -m twine check dist/*

# Runs per-commit hooks, which include various linitings
[testenv:lint]
deps = pre-commit
commands = pre-commit run --all-files --show-diff-on-failure

# Static type checker for variables and functions
[testenv:mypy]
description = run type checker on code base
deps =
    mypy
commands =
    # do not lint tests yet; waiting for pytest 6.0 release
    mypy --strict --install-types --allow-untyped-defs src {posargs}

# A virtualenvs for development test, that includes the 'test' configuration bag from above
[testenv:pytest]
description = running pytest
deps =
    pytest
    pytest-cov
commands =
    pytest {posargs}

# Creates coverage test reports. Results will be in './htmlcov' folder
[testenv:coverage]
description = generate coverage report
deps =
    pytest
    pytest-cov
commands =
    pytest --cov tests --cov arithmetic --cov-report term-missing --cov-report html --cov-context=test --cov-fail-under=100 {posargs}

# Creates user documentation based on Sphinx
[testenv:docs]
description = generate docs in HTML format
deps = -r docs/requirements_lock.txt
commands = sphinx-build -b html docs docs/_build/html

# To be run manually via: 'tox -e upgradedocs' to create a requirements lock file for Sphinx
[testenv:upgradedocs]
description = upgrade sphinx dependencies to build docs
deps = pip-tools
commands = pip-compile --upgrade docs/requirements.in --output-file docs/requirements_lock.txt
